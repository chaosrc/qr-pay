{"version":3,"sources":["Scanner.js","App.js","serviceWorker.js","index.js"],"names":["Scanner","props","canvasRef","useRef","onSuccess","useEffect","mediaStream","video","document","createElement","id","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","setAttribute","play","requestAnimationFrame","tick","canvas","current","context","getContext","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imgData","getImageData","code","QR","data","inversionAttempts","console","log","error","cancelAnimationFrame","getTracks","forEach","track","stop","react_default","a","className","ref","App","_useState","useState","_useState2","Object","slicedToArray","status","setStatus","_useState3","_useState4","setCode","Scanner_Scanner","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"+QAIaA,EAAU,SAACC,GACpB,IAAIC,EAAYC,mBACZC,EAAYH,EAAMG,UAsDtB,OArDAC,oBAAU,WACN,IAEIC,EAFEC,EAAQC,SAASC,cAAc,SACjCC,EAAK,GAETC,UACKC,aACAC,aAAa,CAAEN,OAAO,EAAMO,OAAO,IACnCC,KAAK,SAAAC,GACFV,EAAcU,EACdT,EAAMU,UAAYD,EAClBT,EAAMW,aAAa,eAAe,GAClCX,EAAMY,OACNT,EAAKU,sBAAsBC,KAInC,IAAMA,EAAO,SAAPA,IACF,IACI,IAAIC,EAASpB,EAAUqB,QACnBC,EAAUF,EAAOG,WAAW,MAChC,GAAIlB,EAAMmB,aAAenB,EAAMoB,iBAAkB,CAC7CL,EAAOM,OAASrB,EAAMsB,YACtBP,EAAOQ,MAAQvB,EAAMwB,WACrBP,EAAQQ,UAAUzB,EAAO,EAAG,EAAGe,EAAOQ,MAAOR,EAAOM,QACpD,IAAIK,EAAUT,EAAQU,aAAa,EAAG,EAAGZ,EAAOQ,MAAOR,EAAOM,QAC1DO,EAAOC,IAAGH,EAAQI,KAAMJ,EAAQH,MAAOG,EAAQL,OAAQ,CACvDU,kBAAmB,eAEvBC,QAAQC,IAAI,OAAQL,GAChBA,GACI/B,GACAA,EAAU+B,GAItBzB,EAAKU,sBAAsBC,GAC7B,MAAOoB,GACLF,QAAQC,IAAIC,GACZC,qBAAqBhC,GACjBJ,IACAiC,QAAQC,IAAIlC,GACZA,EAAYqC,YAAYC,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,YAI3D,OAAO,WACHJ,qBAAqBhC,GACjBJ,IACAiC,QAAQC,IAAIlC,GACZA,EAAYqC,YAAYC,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,YAGxD,CAAC1C,IAEA2C,EAAAC,EAAAvC,cAAA,OAAKwC,UAAU,kBACXF,EAAAC,EAAAvC,cAAA,UAAQyC,IAAKhD,EAAW+C,UAAU,aCtC/BE,MApBf,WAAe,IAAAC,EACaC,mBAAS,SADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRK,EADQH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAESN,mBAAS,IAFlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAERxB,EAFQyB,EAAA,GAEFC,EAFED,EAAA,GAUb,OACEb,EAAAC,EAAAvC,cAAA,OAAKwC,UAAU,OACD,SAAXQ,EAAoBV,EAAAC,EAAAvC,cAACqD,EAAD,CAAS1D,UATZ,SAACiC,GACHA,EAAKA,OAErBwB,EAAQxB,GACRqB,EAAU,aAK2D,GACpEvB,EAAKE,KAAKU,EAAAC,EAAAvC,cAAA,WACXsC,EAAAC,EAAAvC,cAAA,UAAQsD,QAAS,kBAAML,EAAU,UAAjC,gBACAX,EAAAC,EAAAvC,cAAA,UAAQsD,QAAS,kBAAML,EAAU,WAAjC,WCPcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAvC,cAAC8D,EAAD,MAAS/D,SAASgE,eAAe,SD2H3C,kBAAmB7D,WACrBA,UAAU8D,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.2b43bba6.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport './Scanner.css'\nimport QR from 'jsqr'\n\nexport const Scanner = (props) => {\n    let canvasRef = useRef()\n    let onSuccess = props.onSuccess\n    useEffect(() => {\n        const video = document.createElement('video')\n        let id = ''\n        let mediaStream\n        navigator\n            .mediaDevices\n            .getUserMedia({ video: true, audio: false })\n            .then(stream => {\n                mediaStream = stream\n                video.srcObject = stream\n                video.setAttribute('playsinline', true)\n                video.play()\n                id = requestAnimationFrame(tick)\n\n            })\n\n        const tick = () => {\n            try {\n                let canvas = canvasRef.current\n                let context = canvas.getContext('2d')\n                if (video.readyState === video.HAVE_ENOUGH_DATA) {\n                    canvas.height = video.videoHeight\n                    canvas.width = video.videoWidth\n                    context.drawImage(video, 0, 0, canvas.width, canvas.height)\n                    let imgData = context.getImageData(0, 0, canvas.width, canvas.height)\n                    let code = QR(imgData.data, imgData.width, imgData.height, {\n                        inversionAttempts: \"dontInvert\",\n                    })\n                    console.log('code', code)\n                    if (code) {\n                        if (onSuccess) {\n                            onSuccess(code)\n                        }\n                    }\n                }\n                id = requestAnimationFrame(tick)\n            } catch (error) {\n                console.log(error)\n                cancelAnimationFrame(id)\n                if (mediaStream) {\n                    console.log(mediaStream)\n                    mediaStream.getTracks().forEach(track => track.stop())\n                }\n            }\n        }\n        return () => {\n            cancelAnimationFrame(id)\n            if (mediaStream) {\n                console.log(mediaStream)\n                mediaStream.getTracks().forEach(track => track.stop())\n            }\n        }\n    }, [onSuccess])\n    return (\n        <div className=\"canvas-wrapper\">\n            <canvas ref={canvasRef} className=\"canvas\"></canvas>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport { Scanner } from './Scanner';\n\nfunction App() {\n  let [status, setStatus] = useState('close')\n  let [code, setCode] = useState({})\n  const handleSuccess = (data) => {\n    const hasData = !!data.data\n    if (hasData) {\n      setCode(data)\n      setStatus('close')\n    }\n  }\n  return (\n    <div className=\"App\">\n      {status === 'open' ? <Scanner onSuccess={handleSuccess}></Scanner> : ''}\n      {code.data}<br/>\n      <button onClick={() => setStatus('open')}>扫描</button>\n      <button onClick={() => setStatus('close')}>close</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}